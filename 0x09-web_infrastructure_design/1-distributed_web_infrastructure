### Distributed Web Infrastructure Design

#### Overview

This design outlines a distributed web infrastructure using three servers to host a website accessible via www.foobar.com. The setup includes an Nginx web server, an application server, a MySQL database, and an HAProxy load balancer.

#### Infrastructure Components

1. **Load Balancer (HAProxy)**
   - **Role:** Distributes incoming traffic across multiple servers to ensure no single server is overwhelmed.
   - **Distribution Algorithm:** Round Robin
     - **How it Works:** Sequentially distributes incoming requests to each server in the list.

2. **Web Server (Nginx)**
   - **Role:** Handles HTTP/HTTPS requests, serves static content, and forwards dynamic requests to the application server.

3. **Application Server**
   - **Role:** Processes business logic and dynamic requests from the web server.

4. **Database (MySQL)**
   - **Role:** Stores and manages application data.
   - **Setup:** Primary-Replica (Master-Slave) cluster
     - **Primary Node:** Handles read and write operations.
     - **Replica Node:** Handles read operations and replicates data from the primary node.

5. **Additional Servers**
   - **Server 1:** Hosts Nginx and the application server.
   - **Server 2:** Hosts a replica of the application server for load balancing.
   - **Server 3:** Hosts the MySQL database (Primary and Replica setup).

#### Infrastructure Workflow

1. **User Access:** User enters `www.foobar.com`.
2. **DNS Lookup:** Resolves `www.foobar.com` to the load balancer's IP address.
3. **Load Balancer:** HAProxy receives the request and distributes it to one of the web servers using the Round Robin algorithm.
4. **Web Server Handling:**
   - Serves static content directly.
   - Forwards dynamic requests to the application server.
5. **Application Server:** Processes requests, potentially querying the MySQL database.
6. **Database Interaction:** 
   - **Primary Node:** Handles write operations and reads.
   - **Replica Node:** Handles additional read operations and keeps data synchronized with the primary node.
7. **Response Assembly:** Application server assembles the response and sends it back through the web server.
8. **Final Response:** Web server sends the response back to the load balancer, which then forwards it to the userâ€™s browser.

#### Detailed Roles

- **Load Balancer (HAProxy):**
  - **Active-Active Setup:** Distributes traffic across multiple active servers, ensuring load is balanced.
  - **Difference:** Active-Active allows multiple servers to handle traffic simultaneously, whereas Active-Passive has one active server and a standby passive server.

- **Database Primary-Replica Cluster:**
  - **Primary Node:** Handles all writes and synchronizes data with the replica.
  - **Replica Node:** Handles read operations and copies data from the primary node.
  - **Difference:** The primary node is the source of truth for data, while the replica provides redundancy and load distribution for read operations.

#### Issues with the Infrastructure

- **SPOF:**
  - If the load balancer fails, the entire system is inaccessible.
  - The primary database node is a single point of failure for write operations.
- **Security Issues:**
  - No firewall protection.
  - No HTTPS for secure communication.
- **No Monitoring:**
  - Lack of monitoring tools means issues cannot be detected or addressed promptly.
